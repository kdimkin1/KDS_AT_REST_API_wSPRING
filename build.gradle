plugins {
	id 'org.springframework.boot' version '2.5.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'io.qameta.allure' version '2.9.6'
	id "io.freefair.lombok" version "6.4.2"
}

group = 'kds.at'
version = '0.0.1'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

def restAssured = "4.4.0",
	junitVersion = "5.8.2",
	slf4jVersion = "1.7.36",
	allureVersion = "2.10.0",
	assertjVersion = "3.22.0"

allure {
	adapter {
		aspectjWeaver.set(true)
		frameworks {
			junit5 {
				adapterVersion.set(allureVersion)
			}
		}
	}
	report {
		version.set(allureVersion)
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	// connect Swagger: see 3.1 https://www.baeldung.com/swagger-2-documentation-for-spring-rest-api
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	implementation 'com.fasterxml.jackson.core:jackson-core:2.13.2'
	implementation 'com.fasterxml.jackson.core:jackson-annotations:2.13.2'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.2.2'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation (
	        "org.springframework.boot:spring-boot-starter-test",
			"io.rest-assured:rest-assured:$restAssured",
			"io.rest-assured:json-schema-validator:$restAssured",
			"io.qameta.allure:allure-rest-assured:$allureVersion",
			"org.assertj:assertj-core:$assertjVersion",
			"org.junit.jupiter:junit-jupiter:$junitVersion",
			"org.slf4j:slf4j-simple:$slf4jVersion",
	        "io.qameta.allure:allure-selenide:$allureVersion",
			"org.aeonbits.owner:owner:1.0.12",
			"org.aspectj:aspectjweaver:1.9.6",
			"commons-io:commons-io:2.6")
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
}

tasks.withType(Test) {
	systemProperties(System.getProperties())
	useJUnitPlatform()

	if (System.getProperty("threads") != null) {
		systemProperties += [
				'junit.jupiter.execution.parallel.enabled'                 : true,
				'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
				'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
				'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
				'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
		]
	}

	testLogging {
		lifecycle {
//            events "started", "failed"
			events "started", "skipped", "failed", "standard_error", "standard_out"
			exceptionFormat "short"
		}
	}
}